// Which syntax this file uses.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: swc_parameter.proto

package swc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SWCParameters_AddSWCParameter_FullMethodName       = "/SWCParameters/addSWCParameter"
	SWCParameters_UpdateSWCParameter_FullMethodName    = "/SWCParameters/updateSWCParameter"
	SWCParameters_DeleteSWCParameter_FullMethodName    = "/SWCParameters/deleteSWCParameter"
	SWCParameters_DeleteAllSWCParameter_FullMethodName = "/SWCParameters/deleteAllSWCParameter"
	SWCParameters_GetAllSWCParameter_FullMethodName    = "/SWCParameters/GetAllSWCParameter"
)

// SWCParametersClient is the client API for SWCParameters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service contract
type SWCParametersClient interface {
	AddSWCParameter(ctx context.Context, in *AddSWCParameterReq, opts ...grpc.CallOption) (*AddSWCParameterRes, error)
	UpdateSWCParameter(ctx context.Context, in *UpdateSWCParameterReq, opts ...grpc.CallOption) (*UpdateSWCParameterRes, error)
	DeleteSWCParameter(ctx context.Context, in *DeleteSWCParameterReq, opts ...grpc.CallOption) (*DeleteSWCParameterRes, error)
	DeleteAllSWCParameter(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DeleteAllSWCParameterRes, error)
	GetAllSWCParameter(ctx context.Context, in *GetAllSWCParameterReq, opts ...grpc.CallOption) (*GetAllSWCParameterRes, error)
}

type sWCParametersClient struct {
	cc grpc.ClientConnInterface
}

func NewSWCParametersClient(cc grpc.ClientConnInterface) SWCParametersClient {
	return &sWCParametersClient{cc}
}

func (c *sWCParametersClient) AddSWCParameter(ctx context.Context, in *AddSWCParameterReq, opts ...grpc.CallOption) (*AddSWCParameterRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSWCParameterRes)
	err := c.cc.Invoke(ctx, SWCParameters_AddSWCParameter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sWCParametersClient) UpdateSWCParameter(ctx context.Context, in *UpdateSWCParameterReq, opts ...grpc.CallOption) (*UpdateSWCParameterRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSWCParameterRes)
	err := c.cc.Invoke(ctx, SWCParameters_UpdateSWCParameter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sWCParametersClient) DeleteSWCParameter(ctx context.Context, in *DeleteSWCParameterReq, opts ...grpc.CallOption) (*DeleteSWCParameterRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSWCParameterRes)
	err := c.cc.Invoke(ctx, SWCParameters_DeleteSWCParameter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sWCParametersClient) DeleteAllSWCParameter(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DeleteAllSWCParameterRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAllSWCParameterRes)
	err := c.cc.Invoke(ctx, SWCParameters_DeleteAllSWCParameter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sWCParametersClient) GetAllSWCParameter(ctx context.Context, in *GetAllSWCParameterReq, opts ...grpc.CallOption) (*GetAllSWCParameterRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllSWCParameterRes)
	err := c.cc.Invoke(ctx, SWCParameters_GetAllSWCParameter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SWCParametersServer is the server API for SWCParameters service.
// All implementations must embed UnimplementedSWCParametersServer
// for forward compatibility.
//
// Service contract
type SWCParametersServer interface {
	AddSWCParameter(context.Context, *AddSWCParameterReq) (*AddSWCParameterRes, error)
	UpdateSWCParameter(context.Context, *UpdateSWCParameterReq) (*UpdateSWCParameterRes, error)
	DeleteSWCParameter(context.Context, *DeleteSWCParameterReq) (*DeleteSWCParameterRes, error)
	DeleteAllSWCParameter(context.Context, *EmptyRequest) (*DeleteAllSWCParameterRes, error)
	GetAllSWCParameter(context.Context, *GetAllSWCParameterReq) (*GetAllSWCParameterRes, error)
	mustEmbedUnimplementedSWCParametersServer()
}

// UnimplementedSWCParametersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSWCParametersServer struct{}

func (UnimplementedSWCParametersServer) AddSWCParameter(context.Context, *AddSWCParameterReq) (*AddSWCParameterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSWCParameter not implemented")
}
func (UnimplementedSWCParametersServer) UpdateSWCParameter(context.Context, *UpdateSWCParameterReq) (*UpdateSWCParameterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSWCParameter not implemented")
}
func (UnimplementedSWCParametersServer) DeleteSWCParameter(context.Context, *DeleteSWCParameterReq) (*DeleteSWCParameterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSWCParameter not implemented")
}
func (UnimplementedSWCParametersServer) DeleteAllSWCParameter(context.Context, *EmptyRequest) (*DeleteAllSWCParameterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllSWCParameter not implemented")
}
func (UnimplementedSWCParametersServer) GetAllSWCParameter(context.Context, *GetAllSWCParameterReq) (*GetAllSWCParameterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSWCParameter not implemented")
}
func (UnimplementedSWCParametersServer) mustEmbedUnimplementedSWCParametersServer() {}
func (UnimplementedSWCParametersServer) testEmbeddedByValue()                       {}

// UnsafeSWCParametersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SWCParametersServer will
// result in compilation errors.
type UnsafeSWCParametersServer interface {
	mustEmbedUnimplementedSWCParametersServer()
}

func RegisterSWCParametersServer(s grpc.ServiceRegistrar, srv SWCParametersServer) {
	// If the following call pancis, it indicates UnimplementedSWCParametersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SWCParameters_ServiceDesc, srv)
}

func _SWCParameters_AddSWCParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSWCParameterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWCParametersServer).AddSWCParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWCParameters_AddSWCParameter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWCParametersServer).AddSWCParameter(ctx, req.(*AddSWCParameterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SWCParameters_UpdateSWCParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSWCParameterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWCParametersServer).UpdateSWCParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWCParameters_UpdateSWCParameter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWCParametersServer).UpdateSWCParameter(ctx, req.(*UpdateSWCParameterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SWCParameters_DeleteSWCParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSWCParameterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWCParametersServer).DeleteSWCParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWCParameters_DeleteSWCParameter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWCParametersServer).DeleteSWCParameter(ctx, req.(*DeleteSWCParameterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SWCParameters_DeleteAllSWCParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWCParametersServer).DeleteAllSWCParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWCParameters_DeleteAllSWCParameter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWCParametersServer).DeleteAllSWCParameter(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SWCParameters_GetAllSWCParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSWCParameterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWCParametersServer).GetAllSWCParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWCParameters_GetAllSWCParameter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWCParametersServer).GetAllSWCParameter(ctx, req.(*GetAllSWCParameterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SWCParameters_ServiceDesc is the grpc.ServiceDesc for SWCParameters service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SWCParameters_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SWCParameters",
	HandlerType: (*SWCParametersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addSWCParameter",
			Handler:    _SWCParameters_AddSWCParameter_Handler,
		},
		{
			MethodName: "updateSWCParameter",
			Handler:    _SWCParameters_UpdateSWCParameter_Handler,
		},
		{
			MethodName: "deleteSWCParameter",
			Handler:    _SWCParameters_DeleteSWCParameter_Handler,
		},
		{
			MethodName: "deleteAllSWCParameter",
			Handler:    _SWCParameters_DeleteAllSWCParameter_Handler,
		},
		{
			MethodName: "GetAllSWCParameter",
			Handler:    _SWCParameters_GetAllSWCParameter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swc_parameter.proto",
}
